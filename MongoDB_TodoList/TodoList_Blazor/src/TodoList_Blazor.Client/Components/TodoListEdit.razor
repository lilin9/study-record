@using Domain.Entities

<Modal Title="编辑" Visible="@Visible" OnOk="@OnOkHandler" OnCancel="OnCancelHandler" Draggable="@(true)">
    <ChildContent>
        <Form @ref="FormRef" Model="Model" ValidateMode="@FormValidateMode.Rules">
            <FormItem Label="清单内容" Required Rules="@(new FormValidationRule[]{new() {Required = true, Message = "清单内容是必须的"}})">
                <Input @bind-Value="@context.Content" />
            </FormItem>
            <FormItem Label="提醒时间" Required Rules="@(new FormValidationRule[]{new() {Required = true, Message = "提醒时间是必须的"}})">
                <DatePicker Value="context.RemindTime" TValue="DateTime?" ShowTime="@true" Format="yyyy/MM/dd HH:mm:ss" Mask="yyyy/MM/dd HH:mm:ss" Placeholder="@("yyyy/MM/dd HH:mm:ss")" />
            </FormItem>
            <FormItem Label="是否提醒" Required>
                <RadioGroup @bind-Value="@context.IsRemind">
                    <Radio Value="@true">要提醒</Radio>
                    <Radio Value="@false">不提醒</Radio>
                </RadioGroup>
            </FormItem>
            <FormItem Label="是否完成" Required>
                <RadioGroup @bind-Value="@context.CompleteStatus">
                    <Radio Value="1">已完成</Radio>
                    <Radio Value="0">未完成</Radio>
                </RadioGroup>
            </FormItem>
        </Form>
    </ChildContent>
</Modal>

@code {

    [Parameter]
    public bool Visible { get; set; }
    [Parameter]
    public TodoList Model { get; set; } = null!;

    //表单引用
    private Form<TodoList> FormRef { get; set; } = null!;

    //确认按钮点击事件的委托
    [Parameter]
    public EventCallback<TodoList> OnEditSure { get; set; }

    /// <summary>
    /// 确认点击事件
    /// </summary>
    /// <returns></returns>
    private async Task OnOkHandler() {
        var validResult = FormRef.Validate();
        if (validResult) {
            await OnEditSure.InvokeAsync(Model);
        }
    }

    /// <summary>
    /// 取消点击事件
    /// </summary>
    private void OnCancelHandler() {
        Visible = false;
    }
}
